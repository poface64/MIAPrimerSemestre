xnuevo = (1-beta)*xc + beta*(X[3,-ncol(X)])
}else{
if((X[2,ncol(X)] < fxr) & (fxr< X[3,ncol(X)])){
# Aplica el método de contracción
xnuevo = (1+beta)*xc - beta*(X[3,-ncol(X)])
}
}
}
# Calcula f(xnuevo) y remplaza xh por xnuevo
# Pegar como vector
X[3,] = c(xnuevo,fx(xnuevo))
# Calcular Q
Q = 0
for(i in 1:nrow(X)){
# Calcular las diferencias y guardarlas
Q = Q + ((X[i,ncol(X)]-fxc)^2/nrow(X))
}
Q = sqrt(Q)
# Armar la matriz
resultados[k,] = c(k,X[1,],Q)
# Actualizar K para llevar el control de las iteraciones
k = k+1
}
library(flextable)
autofit(theme_box(flextable(round(resultados,4))))
resultados
# Convertir los datos en una serie temporal que empieza en enero de 2013
precio_ts <- ts(datos$Precio, start = c(2013, 1), frequency = 12)
rm(list=ls())
# Cargar los datos desde excel
library(readxl)
ruta = "/home/angel/Descargas/Arimar 1.xlsx"
datos = as.data.frame(read_excel(ruta))
datos
# Cargar los paquetes necesarios
library(forecast)
# Convertir los datos en una serie temporal que empieza en enero de 2013
precio_ts <- ts(datos$Precio, start = c(2013, 1), frequency = 12)
# Ajustar el modelo ARIMA (1,2,1)
modelo_arima <- Arima(precio_ts, order = c(1, 2, 1))
# Realizar el pronóstico para enero de 2021 (paso 97)
pronostico <- forecast(modelo_arima, h = 20)
# Extraer el valor pronosticado para enero de 2021
valor_enero_2021 <- pronostico$mean[length(pronostico$mean)]
valor_enero_2021
pronostico
rm(list=ls())
##### Método Simplex ####
# Introducir 3 puntos
#x1 = un punto de p dimensiones
#x2 = un punto de p dimensiones
#x3 = un punto de p dimensiones
#gamma = parametro de ajuste
#beta = parametro de ajuste
#tol =  tolerancia permitida
#fx = función de varias variables
x1 = c(0,0,0)
x2 = c(1,2,-1)
x3 = c(4,-3,2)
tol = 0.00001
gamma = 1.5
beta = 0.5
#fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
fx = function(X){ (X[1]-3)^2 + (X[2]+2)^2 + (X[3]-1)^2}
-0.0450/0.0672
-0.3626/0.015
0.0352/0.015
pronostico
rm(list=ls())
# Cargar los datos desde excel
library(readxl)
ruta = "/home/angel/Descargas/Arimar 1.xlsx"
datos = as.data.frame(read_excel(ruta))
datos
# Cargar los paquetes necesarios
library(forecast)
# Convertir los datos en una serie temporal que empieza en enero de 2013
precio_ts <- ts(datos$Precio, start = c(2013, 1), frequency = 12)
# Ajustar el modelo ARIMA (1,2,1)
modelo_arima <- Arima(precio_ts, order = c(1, 2, 1))
# Realizar el pronóstico para enero de 2021 (paso 97)
pronostico <- forecast(modelo_arima, h = 20);pronostico
# Pegarle un punto X
x1
rm(list=ls())
##### Método Simplex ####
# Introducir 3 puntos
#x1 = un punto de p dimensiones
#x2 = un punto de p dimensiones
#x3 = un punto de p dimensiones
#gamma = parametro de ajuste
#beta = parametro de ajuste
#tol =  tolerancia permitida
#fx = función de varias variables
x1 = c(0,0,0)
x2 = c(1,2,-1)
x3 = c(4,-3,2)
tol = 0.00001
gamma = 1.5
beta = 0.5
#fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
fx = function(X){ (X[1]-3)^2 + (X[2]+2)^2 + (X[3]-1)^2}
# Pegarle un punto X
x1
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(x1,resultados)
resultados
cbind.data.frame
as.data.frame(x1)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
resultados
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
resultados
1:length(resultados)
names(resultados)[1:(length(resultados)-3)]
paste("X",1:(length(resultados)-3)
)
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
# Cambiarle los nombres
names(resultados)[1:(length(resultados)-3)]=paste0("X",1:(length(resultados)-3))
resultados
# Re acomodar para poner al principio la iter
resultados[(length(resultados)-2)]
(length(resultados)-2)
(length(resultados)-2)
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
names(resultados)[1:(ncol(resultados)-3)]
paste0("X",1:(ncol(resultados)-3))
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
setdiff(1:nrow(resultados),it )
1:nrow(resultados)
setdiff(1:ncol(resultados),it )
resultados[,c(it,setdiff(1:ncol(resultados),it ))]
rm(list=ls())
rm(list=ls())
##### Método Simplex ####
# Introducir 3 puntos
#x1 = un punto de p dimensiones
#x2 = un punto de p dimensiones
#x3 = un punto de p dimensiones
#gamma = parametro de ajuste
#beta = parametro de ajuste
#tol =  tolerancia permitida
#fx = función de varias variables
x1 = c(0,0,0)
x2 = c(1,2,-1)
x3 = c(4,-3,2)
tol = 0.00001
gamma = 1.5
beta = 0.5
#fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
fx = function(X){ (X[1]-3)^2 + (X[2]+2)^2 + (X[3]-1)^2}
#### PASO 1: Elegir Gamma > 1 y Beta en [0,1] y una tolerancia epsilon
k = 1
#### PASO 2: ####
# xl el mejor punto (entiendase mejor por el que minimiza la función)
# xg el segundo mejor punto
# Encontrar Xh (el peor punto), Basados en su desempeño
X = rbind(x1,x2,x3)
Fi = apply(X,1,fx)
# Agregarle sus valores
X = cbind(X,Y = Fi)
Q = 50
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
# Cambiarle los nombres
names(resultados)[1:(ncol(resultados)-3)]=paste0("X",1:(ncol(resultados)-3))
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
resultados = resultados[,c(it,setdiff(1:ncol(resultados),it ))]
resultados
while(Q>tol){
#### AQUI VA LA PARTE ITERATIVA
# Ordenarlos de acuerdo a sus desempeños
X = X[order(X[,ncol(X)]),]# Ordenados: 1 mejor, 2 segundo mejor, 3 peor
# Obtener el centroide sin el peor punto (xh)
xc = apply(X[-3,-ncol(X)],2,mean)
fxc = fx(xc)
#### Paso 3 ####
xr =  2*xc-X[3,-ncol(X)]
# Definir un x auxiliar
xnuevo = xr
# Calcular fx de xr
fxr = fx(xr)
# Verifiicar si f(xr) < f(xl) ENTONCES Xnew = (1+gamma)xc - gamma(xh) Expansión
if(fxr<X[1,ncol(X)]){
# Aplicar la expansión
xnuevo = (1+gamma)*xc - gamma*(X[3,-ncol(X)])
}else{
if(fxr >= X[3,ncol(X)]){
# Aplica el método de contracción
xnuevo = (1-beta)*xc + beta*(X[3,-ncol(X)])
}else{
if((X[2,ncol(X)] < fxr) & (fxr< X[3,ncol(X)])){
# Aplica el método de contracción
xnuevo = (1+beta)*xc - beta*(X[3,-ncol(X)])
}
}
}
# Calcula f(xnuevo) y remplaza xh por xnuevo
# Pegar como vector
X[3,] = c(xnuevo,fx(xnuevo))
# Calcular Q
Q = 0
for(i in 1:nrow(X)){
# Calcular las diferencias y guardarlas
Q = Q + ((X[i,ncol(X)]-fxc)^2/nrow(X))
}
Q = sqrt(Q)
# Armar la matriz
resultados[k,] = c(k,X[1,],Q)
# Actualizar K para llevar el control de las iteraciones
k = k+1
}
library(flextable)
autofit(theme_box(flextable(round(resultados,4))))
# Corrida de clase
x1 = c(0,0,0)
x2 = c(1,2,-1)
x3 = c(4,-3,2)
tol = 0.001
gamma = 1.5
beta = 0.5
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
SIMPLEX = function(fx,x1,x2,x3,gamma,beta,tol){
#### PASO 1: Elegir Gamma > 1 y Beta en [0,1] y una tolerancia epsilon
k = 1
#### PASO 2: ####
# xl el mejor punto (entiendase mejor por el que minimiza la función)
# xg el segundo mejor punto
# Encontrar Xh (el peor punto), Basados en su desempeño
X = rbind(x1,x2,x3)
Fi = apply(X,1,fx)
# Agregarle sus valores
X = cbind(X,Y = Fi)
Q = 50
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
# Cambiarle los nombres
names(resultados)[1:(ncol(resultados)-3)]=paste0("X",1:(ncol(resultados)-3))
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
resultados = resultados[,c(it,setdiff(1:ncol(resultados),it ))]
resultados
while(Q>tol){
#### AQUI VA LA PARTE ITERATIVA
# Ordenarlos de acuerdo a sus desempeños
X = X[order(X[,ncol(X)]),]# Ordenados: 1 mejor, 2 segundo mejor, 3 peor
# Obtener el centroide sin el peor punto (xh)
xc = apply(X[-3,-ncol(X)],2,mean)
fxc = fx(xc)
#### Paso 3 ####
xr =  2*xc-X[3,-ncol(X)]
# Definir un x auxiliar
xnuevo = xr
# Calcular fx de xr
fxr = fx(xr)
# Verifiicar si f(xr) < f(xl) ENTONCES Xnew = (1+gamma)xc - gamma(xh) Expansión
if(fxr<X[1,ncol(X)]){
# Aplicar la expansión
xnuevo = (1+gamma)*xc - gamma*(X[3,-ncol(X)])
}else{
if(fxr >= X[3,ncol(X)]){
# Aplica el método de contracción
xnuevo = (1-beta)*xc + beta*(X[3,-ncol(X)])
}else{
if((X[2,ncol(X)] < fxr) & (fxr< X[3,ncol(X)])){
# Aplica el método de contracción
xnuevo = (1+beta)*xc - beta*(X[3,-ncol(X)])
}
}
}
# Calcula f(xnuevo) y remplaza xh por xnuevo
# Pegar como vector
X[3,] = c(xnuevo,fx(xnuevo))
# Calcular Q
Q = 0
for(i in 1:nrow(X)){
# Calcular las diferencias y guardarlas
Q = Q + ((X[i,ncol(X)]-fxc)^2/nrow(X))
}
Q = sqrt(Q)
# Armar la matriz
resultados[k,] = c(k,X[1,],Q)
# Actualizar K para llevar el control de las iteraciones
k = k+1
}
# Devolver los resultados
return(resultados)
}
x1 = c(0,0,0)
x2 = c(1,2,-1)
x3 = c(4,-3,2)
tol = 0.001
gamma = 1.5
beta = 0.5
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
# Corrida de clase
x1 = c(0,0)
x2 = c(2,0)
x3 = c(1,1)
tol = 0.001
gamma = 1.5
beta = 0.5
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
SIMPLEX(fx,x1,x2,x3,gamma,beta,tol)
library(flextable)
autofit(theme_box(flextable(round(resultados,4))))
rm(list=ls())
##### Método Simplex ####
# Introducir 3 puntos
#x1 = un punto de p dimensiones
#x2 = un punto de p dimensiones
#x3 = un punto de p dimensiones
#gamma = parametro de ajuste
#beta = parametro de ajuste
#tol =  tolerancia permitida
#fx = función de varias variables
SIMPLEX = function(fx,x1,x2,x3,gamma,beta,tol){
#### PASO 1: Elegir Gamma > 1 y Beta en [0,1] y una tolerancia epsilon
k = 1
#### PASO 2: ####
# xl el mejor punto (entiendase mejor por el que minimiza la función)
# xg el segundo mejor punto
# Encontrar Xh (el peor punto), Basados en su desempeño
X = rbind(x1,x2,x3)
Fi = apply(X,1,fx)
# Agregarle sus valores
X = cbind(X,Y = Fi)
Q = 50
resultados = data.frame(Iter = 0,Y = 0,Q = 0)
# Pegarle un punto X
resultados = cbind.data.frame(as.data.frame(t(x1)) ,resultados)
# Cambiarle los nombres
names(resultados)[1:(ncol(resultados)-3)]=paste0("X",1:(ncol(resultados)-3))
# Re acomodar para poner al principio la iter
it = (length(resultados)-2)
resultados = resultados[,c(it,setdiff(1:ncol(resultados),it ))]
resultados
while(Q>tol){
#### AQUI VA LA PARTE ITERATIVA
# Ordenarlos de acuerdo a sus desempeños
X = X[order(X[,ncol(X)]),]# Ordenados: 1 mejor, 2 segundo mejor, 3 peor
# Obtener el centroide sin el peor punto (xh)
xc = apply(X[-3,-ncol(X)],2,mean)
fxc = fx(xc)
#### Paso 3 ####
xr =  2*xc-X[3,-ncol(X)]
# Definir un x auxiliar
xnuevo = xr
# Calcular fx de xr
fxr = fx(xr)
# Verifiicar si f(xr) < f(xl) ENTONCES Xnew = (1+gamma)xc - gamma(xh) Expansión
if(fxr<X[1,ncol(X)]){
# Aplicar la expansión
xnuevo = (1+gamma)*xc - gamma*(X[3,-ncol(X)])
}else{
if(fxr >= X[3,ncol(X)]){
# Aplica el método de contracción
xnuevo = (1-beta)*xc + beta*(X[3,-ncol(X)])
}else{
if((X[2,ncol(X)] < fxr) & (fxr< X[3,ncol(X)])){
# Aplica el método de contracción
xnuevo = (1+beta)*xc - beta*(X[3,-ncol(X)])
}
}
}
# Calcula f(xnuevo) y remplaza xh por xnuevo
# Pegar como vector
X[3,] = c(xnuevo,fx(xnuevo))
# Calcular Q
Q = 0
for(i in 1:nrow(X)){
# Calcular las diferencias y guardarlas
Q = Q + ((X[i,ncol(X)]-fxc)^2/nrow(X))
}
Q = sqrt(Q)
# Armar la matriz
resultados[k,] = c(k,X[1,],Q)
# Actualizar K para llevar el control de las iteraciones
k = k+1
}
# Devolver los resultados
return(resultados)
}
library(flextable)
# Corrida de clase
x1 = c(0,0)
x2 = c(2,0)
x3 = c(1,1)
tol = 0.001
gamma = 1.5
beta = 0.5
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
resu = SIMPLEX(fx,x1,x2,x3,gamma,beta,tol)
resultados
autofit(theme_box(flextable(round(resu,4))))
# Libreria para las tablas bonitas
library(flextable)
source("Tarea 9. SIMPLEX MAIN.R")
# Corrida de clase
x1 = c(0,0)
x2 = c(2,0)
x3 = c(1,1)
tol = 0.001
gamma = 1.5
beta = 0.5
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
resu = SIMPLEX(fx,x1,x2,x3,gamma,beta,tol)
# Reportar los resultados
autofit(theme_box(flextable(round(resu,4))))
reticulate::repl_python()
# Cargar librería necesaria
library(plot3D)
# Cargar librería necesaria
install.packages("plot3D")
library(plot3D)
# Definir la función
f <- function(x, y) {
(x^2 + y - 11)^2 + (x + y^2 - 7)^2
}
# Crear el grid
x <- seq(-6, 6, length.out = 100)
y <- seq(-6, 6, length.out = 100)
z <- outer(x, y, f)
# Graficar la superficie
persp3D(x, y, z, col = "lightblue", theta = 30, phi = 20,
main = "Gráfica 3D de la función", xlab = "X1", ylab = "X2", zlab = "f(X1, X2)")
# Cargar la biblioteca
library(rgl)
# Cargar la biblioteca
library(rgl)
# Definir la función
f <- function(x, y) {
(x^2 + y - 11)^2 + (x + y^2 - 7)^2
}
# Crear el grid
x <- seq(-6, 6, length.out = 100)
y <- seq(-6, 6, length.out = 100)
z <- outer(x, y, f)
# Crear la superficie 3D interactiva
open3d() # Abre la ventana de gráficos
surface3d(x, y, z, col = "lightblue", alpha = 0.8)
# Opcionales: Agregar ejes y etiquetas
axes3d()
title3d(xlab = "X1", ylab = "X2", zlab = "f(X1, X2)", main = "Gráfica 3D con rgl")
# Cargar la biblioteca
library(rgl)
# Definir la función
f <- function(x, y) {
(x^2 + y - 11)^2 + (x + y^2 - 7)^2
}
# Crear el grid
x <- seq(-6, 6, length.out = 100)
y <- seq(-6, 6, length.out = 100)
z <- outer(x, y, f)
# Crear la superficie 3D interactiva
open3d() # Abre la ventana de gráficos
surface3d(x, y, z, col = "lightblue", alpha = 0.8)
# Opcionales: Agregar ejes y etiquetas
axes3d()
title3d(xlab = "X1", ylab = "X2", zlab = "f(X1, X2)", main = "Gráfica 3D con rgl")
# Crear el grid
x <- seq(-6, 6, length.out = 10)
y <- seq(-6, 6, length.out = 10)
z <- outer(x, y, f)
# Crear la superficie 3D interactiva
open3d() # Abre la ventana de gráficos
surface3d(x, y, z, col = "lightblue", alpha = 0.8)
# Opcionales: Agregar ejes y etiquetas
axes3d()
title3d(xlab = "X1", ylab = "X2", zlab = "f(X1, X2)", main = "Gráfica 3D con rgl")
z <- outer(x, y, f)
z
# Crear el grid
x <- seq(-100, 100, length.out = 100)
y <- seq(-100, 100, length.out = 100)
z <- outer(x, y, f)
# Crear la superficie 3D interactiva
open3d() # Abre la ventana de gráficos
surface3d(x, y, z, col = "lightblue", alpha = 0.8)
# Opcionales: Agregar ejes y etiquetas
axes3d()
title3d(xlab = "X1", ylab = "X2", zlab = "f(X1, X2)", main = "Gráfica 3D con rgl")
# Crear el grid
x <- seq(-3, 3, length.out = 100)
y <- seq(-3, 3, length.out = 100)
z <- outer(x, y, f)
# Crear la superficie 3D interactiva
open3d() # Abre la ventana de gráficos
surface3d(x, y, z, col = "lightblue", alpha = 0.8)
# Opcionales: Agregar ejes y etiquetas
axes3d()
title3d(xlab = "X1", ylab = "X2", zlab = "f(X1, X2)", main = "Gráfica 3D con rgl")
reticulate::repl_python()
knitr::opts_chunk$set(echo = F,
eval = T,
message = F,
warning = F)
reticulate::repl_python()
