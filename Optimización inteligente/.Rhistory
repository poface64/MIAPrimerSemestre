"¿Con qué frecuencia consumo cereales?",
"¿Realizas alguna de las siguientes acciones?",
"Papel",
"Cartón",
"Pet",
"Vidrio",
"Plástico",
"Otro, ¿Cuál?"
)
## El tipo de escala
Escala <- c(
"Nominal",
"Ordinal",
"Abierta",
"Abierta",
"Nominal",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Nominal",
"Nominal",
"Nominal",
"Nominal",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Nominal",
"Likert",
"Likert",
"Likert",
"Likert",
"Likert",
"Abierta"
)
## Posibles respuestas
# Columna de texto
Respuestas <- c(
"Sí, No",
"17, 18-22, 23-26, 27-30, 31-35, 36-40",
"Variable",
"Variable",
"Conformidad, Enojo, Impotencia, Indiferencia, Interés, Miedo, Resignación, Tristeza",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"A pie, Auto, Bicicleta, Moto, Transporte público",
"Productores locales, Supermercados",
"Si, No",
"La practicidad en que puedo adquirirlo, Que apoye alguna causa, Que beneficie mi salud, Que cuide al ambiente en su proceso de elaboración, Que provenga de un comercio justo con productores, Que satisfaga mi necesidad, Que tenga un precio accesible",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Separación de basura en orgánica e inorgánica, Reciclaje de residuos, Clasificación de residuos, Ninguna",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Siempre, Casi siempre, Pocas veces, Nunca",
"Variable"
)
# Para los gráficos en HD
library(rsvg)
library(jpeg)
#### Juntar y proyectar ####
library(knitr)
library(flextable)
cuesti = cbind.data.frame(Variable,Escala,Respuestas)
kable(cuesti)
install.packages("palmerpenguins")
library(palmerpenguins)
# Librerias para sacar gráficos de ggplot2 a buena calidad #
library(rsvg)
library(jpeg)
library(palmerpenguins)
datos = penguins
# Hacer una tabla de datos
T1 = table(datos$species)
T1
# Hacer una tabla de datos
T1 = table(datos$species);T1
# Hacer una tabla de datos
T1 = table(datos$species);T1
# Convertirla en un gráfico de barras
T1 = as.data.frame(T1);T1
# Hacer una tabla de datos
T1 = table(Especie = datos$species);T1
# Convertirla en un gráfico de barras
T1 = as.data.frame(T1);T1
library(ggplot2)
library(ggplot2)
ggplot(T1,aes(x = Especies, y = Freq, fill = Especie))
ggplot(T1,aes(x = Especies, y = Freq, fill = Especie)) +
geom_bar(stat = "identity")
rm(list=ls())
#### Hacer gráficos en ggplot2 y exportarlos en buena calidad ####
library(rsvg)
library(jpeg)
# Contabilizar las especies de los pinwinos #
datos = penguins
# Contabilizar las especies de los pinwinos #
library(palmerpenguins)
datos = penguins
# Hacer una tabla de datos
T1 = table(Especie = datos$species);T1
# Convertirla en un gráfico de barras
T1 = as.data.frame(T1);T1
# Contabilizar las especies de los pinwinos #
library(palmerpenguins)
datos = penguins
# Hacer una tabla de datos
T1 = table(Especie = datos$species);T1
# Convertir la tabla en un data frame
T1 = as.data.frame(T1);T1
# Hacer un gráfico de barras en ggplot2 de las especies
ggplot(T1,aes(x = Especies, y = Freq, fill = Especie)) +
geom_bar(stat = "identity")
#### 1.- Hacer gráficos en ggplot2 y exportarlos en buena calidad ####
library(rsvg)
library(jpeg)
library(ggplot2)
# Contabilizar las especies de los pinwinos #
library(palmerpenguins)
datos = penguins
# Hacer una tabla de datos
T1 = table(Especie = datos$species);T1
# Convertir la tabla en un data frame
T1 = as.data.frame(T1);T1
# Hacer un gráfico de barras en ggplot2 de las especies
ggplot(T1,aes(x = Especies, y = Freq, fill = Especie)) +
geom_bar(stat = "identity")
T1
# Hacer un gráfico de barras en ggplot2 de las especies
ggplot(T1,aes(x = Especie, y = Freq, fill = Especie)) +
geom_bar(stat = "identity")
# Hacer un gráfico de barras en ggplot2 de las especies
ggplot(T1,aes(x = Especie, y = Freq, fill = Especie)) +
geom_bar(stat = "identity")+ # Indicarle que sea una gráfica de barras
# Capa de tunead
theme_bw() # Quitar el fondo
# Hacer un gráfico de barras en ggplot2 de las especies
ggplot(T1,aes(x = Especie, y = Freq, fill = Especie)) +
geom_bar(stat = "identity") # Indicarle que sea una gráfica de barras
# Hacer un gráfico de barras en ggplot2 de las especies
G1 = ggplot(T1,aes(x = Especie, y = Freq, fill = Especie)) +
geom_bar(stat = "identity") # Indicarle que sea una gráfica de barras
G1
G1
### Sacar el gráfico
ggsave("G1.svg", G1,
width = 7, height = 7,
dpi = 4000)
install.packages("svglite")
library(ggplot2)
#### 1.- Hacer gráficos en ggplot2 y exportarlos en buena calidad ####
library(rsvg)
library(jpeg)
library(ggplot2)
# Contabilizar las especies de los pinwinos #
library(palmerpenguins)
### Sacar el gráfico
ggsave("G1.svg", G1,
width = 7, height = 7,
dpi = 4000)
file.choose()
knitr::opts_chunk$set(echo = TRUE)
# Definir la función objetivo a minimizar
fx = function(x1,x2){(x1^2 + x2 - 11)^2 + (x1 + x2^2 - 7)^2 }
# Calcular los puntos iniciales
fx(0,0)
fx(0,0) #x1
fx(2,0) #x2
fx(1,1) #x3
# Calcular el punto central
central = (c(2,0)+c(1,1)) /2
# Calcular el punto central
central = (c(2,0)+c(1,1)) /2;central
# Evaluar ese punto
fx(1.5,0.5)
central
# Calcular el reflejado
xr = 2*central - c(0,0)
xr
fx(3,1)
central
2.5 * central
fx(3.75,1.25)
fx(3.75,1.25)
fx(2,0)
fx(1,1)
a = c(fx(3.75,1.25),fx(2,0),fx(1,1))
a
a-(central)
a-fx(1.5,0.5)
(a-fx(1.5,0.5))^2
sum((a-fx(1.5,0.5))^2)
sum((a-fx(1.5,0.5))^2)/(3+1)
sqrt(sum((a-fx(1.5,0.5))^2)/(3+1))
sqrt(sum((a-fx(1.5,0.5))^2)/(3))
sqrt(sum((a-fx(1.5,0.5))^2)/(4))
sqrt(sum((a-fx(1.5,0.5))^2)/(3))
a = c(fx(3.75,1.25),fx(2,0),fx(1,1))
sqrt(sum((a-fx(1.5,0.5))^2)/(3))
a = c(fx(3.75,1.25),fx(2,0),fx(1,1))
a
central = 0.5(c(3.75,1.25) + c(2,0))
central = 0.5*(c(3.75,1.25) + c(2,0))
central
fx(2.875,0.625)
fx(2.875,0.625)
2*central - c(1,1)
### crear el punto reflejado
xr = 2*central - c(1,1)
xr
fx(4.75,0.25)
#
xnuevo = 0.5*central + 0.5 * c(1,1)
xnuevo
fx(1.9375,0.8125)
### Evaluar los puntos
central
c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))
(c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-central)^2
fx(1.9375,0.8125)
(c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-central)
central
(c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-fx(2.875,0.625))
(c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-fx(2.875,0.625))^2
((c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-fx(2.875,0.625))^2)/3
sum(((c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-fx(2.875,0.625))^2)/3)
sqrt(sum(((c(fx(1.9375,0.8125),fx(2,0),fx(3.75,1.25))-fx(2.875,0.625))^2)/3))
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
fx = function(X){ (X[1]-3)^2 + (X[2]+2)^2 + (X[3]-1)^2}
fx
x0 = c(0,0)
x0 = c(0,0)
xi = c(0.5,0)
fx(xi)
xi2 = c(0,0.5)
fx(xi2)
x0 = c(0,0)
xi
fx(xi)
fx = function(X){ (X[1]-3)^2 + (X[2]+2)^2 + (X[3]-1)^2}
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
x0 = c(0,0)
fx(x0)
xi = c(0.5,0)
fx(xi)
xi2 = c(0,0.5)
fx(xi2)
xi = c(0.5,0)
fx(xi)
xi2 = c(0,0.5)
fx(xi2)
xim = c(-0.5,0)
fx(xim)
xim = c(-0.5,0)
fx(xim)
x0 = c(0,0)
xi = c(0.5,0)
fx(xi)
xim = c(-0.5,0)
fx(xim)
x0 = c(0,0)
xi = c(0.5,0)
fx(xi)
xim = c(-0.5,0)
fx(xim)
xi2 = c(0.5,0.5)
fx(xi2)
xi2 = c(0.5,-0.5)
fx(xi2)
fx(c(1,1))
fx(c(1.5,1.5))
fx(c(0.5,0.5))
fx(c(1,1))
fx(c(1.5,1.5))
fx(c(2.5,2.5))
rm(list=ls())
# Cargar los datos desde excel
library(readxl)
ruta = "/home/angel/Descargas/Arimar 1.xlsx"
datos = as.data.frame(read_excel(ruta))
datos
# Cargar los paquetes necesarios
library(forecast)
# Cargar los paquetes necesarios
library(forecast)
# Convertir los datos en una serie temporal que empieza en enero de 2013
precio_ts <- ts(datos$Precio, start = c(2013, 1), frequency = 12)
# Ajustar el modelo ARIMA (1,2,1)
modelo_arima <- Arima(precio_ts, order = c(1, 2, 1))
# Realizar el pronóstico para enero de 2021 (paso 97)
pronostico <- forecast(modelo_arima, h = 20);pronostico
-0.3626/0.015
-0.1608/0.0646
knitr::knit_engines$set(clisp = function(options) {
# Ejecuta el código Lisp usando un intérprete del sistema, como SBCL o CLISP.
code <- paste(options$code, collapse = "\n")
command <- sprintf("echo '%s' | sbcl --script", code)
result <- system(command, intern = TRUE)
paste(result, collapse = "\n")
})
knitr::knit_engines$set(clisp = function(options) {
# Captura el código del bloque
code <- paste(options$code, collapse = "\n")
# Ejecuta el código usando SBCL
command <- sprintf("echo '%s' | sbcl --script", code)
result <- system(command, intern = TRUE)
# Retorna el resultado
paste(result, collapse = "\n")
})
round(runif(1000))
round(runif(1000)) %>% sum()
sum(round(runif(1000))   )
sum(round(runif(1000))) |> sum()
datos = iris
datos$Sepal.Length |> unique()
length(datos$Sepal.Length |> unique())
length(datos$Sepal.Length |> unique())
length(datos$Sepal.Width|> unique())
length(datos$Petal.Length |> unique())
length(datos$Petal.Width |> unique())
35*23*43*22*3
3*3*3*3*3
setwd("Escritorio/MIAPrimerSemestre/Optimización inteligente")
# Cargar los métodos previos
source("Tarea 1. Fase de acotamiento/Tarea 1. Fase de acotamiento MAIN.r")
# Cargar los métodos previos
source("Tarea 1. Fase de acotamiento/Tarea 1. Fase de acotamiento MAIN.r")
source("Tarea 4. Metodo de la sección dorada/Tarea 4. Busqueda la sección dorada MAIN.R")
fx = function(x){(x^2-7 )^2 + (x + 9)^2}
fx = function(x){(x^2-7 )^2 + (x + 9)^2}
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
FA(FX = fx,x_0 = 0,Delta = 0.8)
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
FA(FX = fx,x_0 = 0,Delta = 10)
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
FA(FX = fx,x_0 = 0,Delta = 0.5)
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
FA(FX = fx,x_0 = 10,Delta = 0.5)
X = seq(-10,10,by = 0.01)
X = seq(-10,10,by = 0.01)
plot(X,fx(X))
# Cargar los métodos previos
source("Tarea 1. Fase de acotamiento/Tarea 1. Fase de acotamiento MAIN.r")
source("Tarea 2. Eliminación de regiones/Tarea 2. Eliminación de regiones MAIN.r")
source("Tarea 4. Metodo de la sección dorada/Tarea 4. Busqueda la sección dorada MAIN.R")
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
#Aplicar el método con los parámetros mencionados
res3
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
#Aplicar el método con los parámetros mencionados
res3 = ElimReg(a = -10, b = 10,epsilon = 0.001,fx)
res3
res3 = ElimReg(a = 0, b = 10,epsilon = 0.001,fx)
res3
plot(X,fx(X))
#Aplicar el método con los parámetros mencionados
res3 = ElimReg(a = -10, b = 0,epsilon = 0.001,fx)
res3
source("Tarea 4. Metodo de la sección dorada/Tarea 4. Busqueda la sección dorada MAIN.R")
# Rango de busqueda = [-2.843323,-2.842712]
# Aplicar la busqueda dorada para optimizar
#### Evaluación para el ejercicio de clase ####
# a = 0
# b = 5
# epsilon = 0.001
res1 = Dorado(fx,-2.843323,-2.842712,0.001),6
# Rango de busqueda = [-2.843323,-2.842712]
# Aplicar la busqueda dorada para optimizar
#### Evaluación para el ejercicio de clase ####
# a = 0
# b = 5
# epsilon = 0.001
res1 = Dorado(fx,-2.843323,-2.842712,0.001)
res1
# El valor optmo de alfa es
x = -2.843030
fx(x)
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
#Aplicar el método con los parámetros mencionados
res3 = ElimReg(a = 0, b = 10,epsilon = 0.001,fx)
res3
# Rango de busqueda = [-2.843323,-2.842712]
# Aplicar la busqueda dorada para optimizar
#### Evaluación para el ejercicio de clase ####
# a = 0
# b = 5
# epsilon = 0.001
res1 = Dorado(fx,2.082825,2.083435,0.001)
res1
2.083^2 - 7
2.083 - 7
#fx = function(x){(x^2-7 )^2 + (x + 9)^2}
fx = function(x){(x - 2.661)^2 + (x^2 + 8*x + 11.083)^2 }
X = seq(-10,10,by = 0.01)
plot(X,fx(X))
plot(X,fx(X),
ylim = 10)
plot(X,fx(X),
ylim = c(0,10))
plot(X,fx(X),
ylim = c(0,100))
#fx = function(x){(x^2-7 )^2 + (x + 9)^2}
fx = function(x){(x - 2.661)^2 + (x^2 + 8*x + 11.083)^2 }
X = seq(-100,100,by = 0.01)
plot(X,fx(X),
ylim = c(0,100))
#fx = function(x){(x^2-7 )^2 + (x + 9)^2}
fx = function(x){(x - 2.661)^2 + (x^2 + 8*x + 11.083)^2 }
X = seq(-10,10,by = 0.01)
plot(X,fx(X),
ylim = c(0,100))
# Evaluación de clase
# Fx es la función
# x0 es el punto de inicio
# Delta es el tamaño del paso
#Aplicar el método con los parámetros mencionados
res3 = ElimReg(a = -10, b = 10,epsilon = 0.001,fx)
res3
# Rango de busqueda = [-2.843323,-2.842712]
# Aplicar la busqueda dorada para optimizar
#### Evaluación para el ejercicio de clase ####
# a = 0
# b = 5
# epsilon = 0.001
#res1 = Dorado(fx,2.082825,2.083435,0.001)
#res1
res1 = Dorado(fx,-1.592102,-1.591492,0.001)
res1
# El valor optmo de alfa es
x = 1.591697
fx(x)
# El valor optmo de alfa es
x = -1.591697
fx(x)
source("Tarea 7. Método de Newthon-Rhapson/Tarea 7. Newthon Rhapson MAIN.R")
NS(fx,0,0.001,0.001,D)
# Rango de busqueda = [-2.843323,-2.842712]
# Aplicar la busqueda dorada para optimizar
#### Evaluación para el ejercicio de clase ####
# a = 0
# b = 5
# epsilon = 0.001
#res1 = Dorado(fx,2.082825,2.083435,0.001)
#res1
res1 = Dorado(fx,-1.592102,-1.591492,0.001)
res1
NS(fx,0,0.001,0.001,F)
4-x
4+x
(2.083 + 2.41^2 - 7)
(2.083^2 + 2.41 - 11)
2.083^2 + 2.41 - 11
(2.083 + 2.41^2 -7)
2.083*2
fx = function(x){(x^2+4.166*x - 4.251)^2 + (x + 0.8911)^2}
fx = function(x){(x^2+4.166*x - 4.251)^2 + (x + 0.8911)^2}
ElimReg(a = -10, b = 10,epsilon = 0.001,fx)
fx = function(x){(x^2+4.166*x - 4.251)^2 + (x + 0.8911)^2}
ElimReg(a = -10, b = 10,epsilon = 0.001,fx)
NS(fx,-4.889526,0.001,0.001,F)
X = seq(-10,10,by = 0.01)
plot(X,fx(X),
ylim = c(0,100))
ElimReg(a = -3, b = 10,epsilon = 0.001,fx)
fx = function(x){(x^2+4.166*x - 4.251)^2 + (x + 0.8911)^2}
ElimReg(a = -3, b = 10,epsilon = 0.001,fx)
NS(fx,0.7978821,0.001,0.001,F)
x
c(0.8,-1.592)
d = c(0.8,-1.592)
sqrt(sum(d^2))
