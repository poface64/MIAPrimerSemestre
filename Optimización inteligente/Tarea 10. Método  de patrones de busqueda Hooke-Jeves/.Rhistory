}
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xkp + xkp - xk
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
# El resultado se asigna a xpk del método, no de el explorador
xk = explora[[2]]
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
xk
xkp
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xkp + xkp - xk
xkp
xkp
xkp
xk
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
xb
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
xk
xk
xkp = xk + xk - xb
xkp
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
explora
k
xk
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
xk
xkp
# Re asignar el valor de x(k-1) para no perderlo
xb = xkp
xb
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
fx(xk)
xk
xkp
k
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
xkp
xk
xk
xk + xk
xk + xk - xb
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
xk
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
# Re asignar el valor de x(k-1) para no perderlo
xb = xkp
k = k+1
}else{
# Revisa que show con la norma
}
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
xk
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
xkp
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
# Re asignar el valor de x(k-1) para no perderlo
xb = xkp
xb
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
xk
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
xk
xkp
xk
xk + xk
xk + xk - xb
xb
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
xk
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
xkp
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
xkp
xb
xkp
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
xkp
xk
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# Re asignar el valor de x(k-1) para no perderlo
xb = xk
xb
rm(list = ls())
# Declaro la función que se desea minimizar
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Mecanismo generador de la exploración
exploracion = function(fx,x0,delta){
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
xc = x0
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# El primer vector es la solución inicial
soluciones[,-(D+1)] = xc
# Paso 3. i coincide con las dimensiones? Si es el caso, ve al paso 4
# si no, regresa al paso 1
while(cont1<=D ){
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
# Aumentar el contador
cont1 = cont1 +1
}
# Paso 4, si X encontrado es disinto de X inicial, reporta exito
# SI no, reporta fracaso
resultado = list()
if(sum(x0==xc)==0){
# Si se cumple que son distintos
resultado[1] = "Exito"
resultado[2] =  list(xc)
return(resultado) # Reporta un exito
}else{
# Reporta un fracaso
resultado[1] = "Fracaso"
}
#Devolver la lista con los resultados
return(resultado)
}
exploracion(fx,x0,delta)
#### Método de busqueda de Hooke-Jeeves
# fx: Función multivariable p-dimensional
# x0: punto inicial
# delta = vector de perturbaciones p-dimensional
# alfa = factor de división
# tol = tolerancia permitida
patrones = function(fx,xk,delta,alfa,tol){
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
# Re asignar el valor de x(k-1) para no perderlo
xb = xk
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
# Decirle que el xkp encontrado de explorar, va a ser el nuevo xk
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
k
}
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
xb
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
xkp
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
xk
# Re asignar el valor de x(k-1) para no perderlo
xb = xk
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
xk
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
xk
xkp
k
xk + xk - xb
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
# Re asignar el valor de x(k-1) para no perderlo
xb = xk
xb
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
explora
xkp
xk = c(0,0)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
#xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
if(explora[[1]]=="Exito"){
# Ve al paso 4
xk = explora[[2]]
k = k+1
}else{
# Revisa que show con la norma
}
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
k = k+1
# Paso 5: Realiza otro movimiento de exploración
explora = exploracion(fx,xkp,delta)
# Re asignar el valor de x(k-1) para no perderlo
xb = xk
# El resultado se asigna a xk del método, no de el explorador
xk = explora[[2]]
xk
# Verifica SI f(xk+1) es menor que f(xk)
fx(xk) < fx(xkp)
k
# Paso 4: Hacer k = k+1 y efectuar el movimiento de patrones
# xk+1 = xk + (xk - xk-1)
xkp = xk + xk - xb
xkp
k = k+1
k
exploracion(fx,xkp,delta)
xkp
xc = xkp
xc
# Calcular las dimensiones
D = length(xc)
D
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
soluciones
# El primer vector es la solución inicial
soluciones[,-(D+1)] = xc
soluciones
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
soluciones
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
soluciones
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
xc
# Aumentar el contador
cont1 = cont1 +1
cont1
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
soluciones
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
soluciones
xc
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
xc
# Aumentar el contador
cont1 = cont1 +1
xc = c(2.5,2.5)
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# El primer vector es la solución inicial
soluciones[,-(D+1)] = xc
soluciones
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
xc = c(2.5,2.5)
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# El primer vector es la solución inicial
soluciones[,-(D+1)] = xc
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
soluciones
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
soluciones
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
xc
# Aumentar el contador
cont1 = cont1 +1
cont1
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
soluciones
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
soluciones
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
# Aumentar el contador
cont1 = cont1 +1
xc
