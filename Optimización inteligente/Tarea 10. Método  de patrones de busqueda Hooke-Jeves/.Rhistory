# alfa = 2
# tol = 0.001
# Declaro la función que se desea minimizar
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2)
while()>tol){
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
norma>tol
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
explora[[1]]
explora[[1]]=="Exito"
delta/alfa
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Hacer k = l+1
k = k+1
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
xkp
# Guardar el anterior xk en xb
xb = xk
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
explora2
# Asignar el nuevo valor de xk
xk = explora2[[2]]
xk
print(xk)
#### Método de busqueda de Hooke-Jeeves
# fx: Función multivariable p-dimensional
# x0: punto inicial
# delta = vector de perturbaciones p-dimensional
# alfa = factor de división
# tol = tolerancia permitida
patrones = function(fx,xk,delta,alfa,tol){
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
while(norma>tol){
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
}
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
# Hacer k = l+1
k = k+1
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
# Guardar el anterior xk en xb
xb = xk
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
# Asignar el nuevo valor de xk
xk = explora2[[2]]
print(xk)
# Paso 6, verificar si la cosa sigue
}
}
# Declaro la función que se desea minimizar
#### Evaluación para el ejercicio de clase ####
# x0 = (0,0)
# delta = (0.5,0.5)
# alfa = 2
# tol = 0.001
# Declaro la función que se desea minimizar
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
patrones(fx,x0,delta,alfa,tol)
rm(list = ls())
# Mecanismo generador de la exploración
exploracion = function(fx,x0,delta){
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
xc = x0
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# Paso 3. i coincide con las dimensiones? Si es el caso, ve al paso 4
# si no, regresa al paso 1
while(cont1<=D ){
# El primer vector es la solución inicial
soluciones[1:3,-(D+1)] = rbind(xc,xc,xc)
# Armar la matriz de exploraciones
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
# Aumentar el contador
cont1 = cont1 +1
}
# Paso 4, si X encontrado es disinto de X inicial, reporta exito
# SI no, reporta fracaso
resultado = list()
if(sum(x0==xc)==0){
# Si se cumple que son distintos
resultado[1] = "Exito"
resultado[2] =  list(xc)
return(resultado) # Reporta un exito
}else{
# Reporta un fracaso
resultado[1] = "Fracaso"
}
#Devolver la lista con los resultados
return(resultado)
}
exploracion(fx,x0,delta)
# Mecanismo generador de la exploración
exploracion = function(fx,x0,delta){
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
xc = x0
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# Paso 3. i coincide con las dimensiones? Si es el caso, ve al paso 4
# si no, regresa al paso 1
while(cont1<=D ){
# El primer vector es la solución inicial
soluciones[1:3,-(D+1)] = rbind(xc,xc,xc)
# Armar la matriz de exploraciones
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
# Aumentar el contador
cont1 = cont1 +1
}
# Paso 4, si X encontrado es disinto de X inicial, reporta exito
# SI no, reporta fracaso
resultado = list()
if(sum(x0==xc)==0){
# Si se cumple que son distintos
resultado[1] = "Exito"
resultado[2] =  list(xc)
return(resultado) # Reporta un exito
}else{
# Reporta un fracaso
resultado[1] = "Fracaso"
}
#Devolver la lista con los resultados
return(resultado)
}
exploracion(fx,x0,delta)
x0
xk
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Mecanismo generador de la exploración
exploracion = function(fx,x0,delta){
# Paso 1: Encontrar f = f(x), f+ = f(xi + deltai) y f- = f(xi - deltai)
cont1 = 1 # Definir el contador i
xc = x0
# Calcular las dimensiones
D = length(xc)
# Acomodar los vectores y las evaluaciones
soluciones = matrix(0,nrow = 3,ncol = D+1)
# Paso 3. i coincide con las dimensiones? Si es el caso, ve al paso 4
# si no, regresa al paso 1
while(cont1<=D ){
# El primer vector es la solución inicial
soluciones[1:3,-(D+1)] = rbind(xc,xc,xc)
# Armar la matriz de exploraciones
soluciones[,cont1] = rbind(soluciones[1,cont1], # Caso base
soluciones[2,cont1]+delta[cont1], # CASO DONDE SE AUMENTA EL DELTA
soluciones[3,cont1]-delta[cont1]) # Caso donde disminuye el delta
# Calcular el valor de la solución y añadir a la matriz de puntos
soluciones[,D+1] = apply(soluciones[,1:D],1,fx) # Aqui hubo 3 evaluaciones de la función
# Paso 2: Encontrar fmin = min(f,f+,f-)
# Reordeno en función de f(x) la matriz y me quedo el primero
xc = soluciones[which.min(soluciones[,D+1]),1:D]
# Aumentar el contador
cont1 = cont1 +1
}
# Paso 4, si X encontrado es disinto de X inicial, reporta exito
# SI no, reporta fracaso
resultado = list()
if(sum(x0==xc)==0){
# Si se cumple que son distintos
resultado[1] = "Exito"
resultado[2] =  list(xc)
return(resultado) # Reporta un exito
}else{
# Reporta un fracaso
resultado[1] = "Fracaso"
}
#Devolver la lista con los resultados
return(resultado)
}
exploracion(fx,xk,delta)
exploracion(fx,x0,delta)
# Declaro la función que se desea minimizar
#### Evaluación para el ejercicio de clase ####
# x0 = (0,0)
# delta = (0.5,0.5)
# alfa = 2
# tol = 0.001
# Declaro la función que se desea minimizar
fx = function(X){(X[1]^2+X[2]-11)^2 + (X[1] + X[2]^2-7)^2}
exploracion(fx,x0,delta)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
while(norma>tol){
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
# Hacer k = l+1
k = k+1
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
# Guardar el anterior xk en xb
xb = xk
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
# Asignar el nuevo valor de xk
xk = explora2[[2]]
print(xk)
# Paso 6, verificar si la cosa sigue
}
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
delta = c(0.5.0.5)
delta = c(0.5,0.5)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
norma
explora
delta
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
norma = sqrt(sum(delta^2))
norma
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
explora
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
explora
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Hacer k = l+1
k = k+1
k
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
xkp
# Guardar el anterior xk en xb
xb = xk
xb
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
explora2
# Asignar el nuevo valor de xk
xk = explora2[[2]]
xk
print(xk)
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
explora
xk
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
explora
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Hacer k = l+1
k = k+1
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
xkp
# Guardar el anterior xk en xb
xb = xk
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
# Asignar el nuevo valor de xk
xk = explora2[[2]]
xk
print(xk)
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
explora
explora[[1]]!="Exito"
norma<tol
alfa
# Actualizar el delta
delta = delta/alfa
delta
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
norma = sqrt(sum(delta^2))
norma
# Define la función
fx <- function(x, y) {
(x^2 + y - 11)^2 + (x + y^2 - 7)^2
}
# Define un rango para las variables x y y
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
# Crea una malla y evalúa la función
z <- outer(x, y, fx)
# Grafica la función en 3D
persp3d(x, y, z, col = "lightblue", alpha = 0.8,
xlab = "X1", ylab = "X2", zlab = "f(X)",
main = "Gráfica 3D de fx")
library(rgl)
# Grafica la función en 3D
persp3d(x, y, z, col = "lightblue", alpha = 0.8,
xlab = "X1", ylab = "X2", zlab = "f(X)",
main = "Gráfica 3D de fx")
