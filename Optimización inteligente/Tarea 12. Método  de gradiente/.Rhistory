delta
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
norma = sqrt(sum(delta^2))
norma
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
explora
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
norma = sqrt(sum(delta^2))
norma
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
explora
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Hacer k = l+1
k = k+1
k
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
xkp
# Guardar el anterior xk en xb
xb = xk
xb
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
explora2
# Asignar el nuevo valor de xk
xk = explora2[[2]]
xk
print(xk)
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
explora
xk
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
explora
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
xk
# Hacer k = l+1
k = k+1
# Evectuar el movimiento de patrones
xkp = xk + xk - xb
xkp
# Guardar el anterior xk en xb
xb = xk
# Paso 5 Hacer otro movimiento exploratorio usando xkp
explora2 = exploracion(fx,xkp,delta)
# Asignar el nuevo valor de xk
xk = explora2[[2]]
xk
print(xk)
# Generar ese movimiento exploratorio
explora = exploracion(fx,xk,delta)
explora
# Verificar la condición
if(explora[[1]]!="Exito"){
# Sí no es exitoso, ve al paso 3 para revisar
delta = delta/alfa # Actualiza los delta
explora = exploracion(fx,xk,delta) # Genera un nuevo punto
norma = sqrt(sum(delta^2))
}
# PASO 4 asignar el valor encontrado por el explorador a xk
xk = explora[[2]]
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
# Paso 2: Realiza un movimiento exploratorio con xk como el punto base.
# Hacer que x sea la salida del movimiento exploratorio
# si el movimiento exploratorio es exitoso, hacer x(k+1) y brincar al paso 4
# Si no, ve al paso 3
explora = exploracion(fx,xk,delta)
explora
explora[[1]]!="Exito"
norma<tol
alfa
# Actualizar el delta
delta = delta/alfa
delta
#### Evaluación para el ejercicio de clase ####
x0 = c(0,0)
delta = c(0.5,0.5)
alfa = 2
tol = 0.001
# Paso 1: Elegir un punto inicial x0, incrementos de variables delta_i para cada
# variable, un factor de reducción de paso alfa > 1 y un parametro de tolarancia
# epsilon. Hacer que k = 0
#### SEPARA! xk es para la del método de patrones y xkp para el explorador
xk = c(0,0)
xb = xk
k = 0
norma = sqrt(sum(delta^2))
norma
# Define la función
fx <- function(x, y) {
(x^2 + y - 11)^2 + (x + y^2 - 7)^2
}
# Define un rango para las variables x y y
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
# Crea una malla y evalúa la función
z <- outer(x, y, fx)
# Grafica la función en 3D
persp3d(x, y, z, col = "lightblue", alpha = 0.8,
xlab = "X1", ylab = "X2", zlab = "f(X)",
main = "Gráfica 3D de fx")
library(rgl)
# Grafica la función en 3D
persp3d(x, y, z, col = "lightblue", alpha = 0.8,
xlab = "X1", ylab = "X2", zlab = "f(X)",
main = "Gráfica 3D de fx")
file.choose()
ruta = "/home/angel/Descargas/encuesta.xlsx"
rm(list = ls())
# Cargar la base de datos
library(readxl)
ruta = "/home/angel/Descargas/encuesta.xlsx"
datos = read_excel(ruta)
head(datos)
datos = as.data.frame(read_excel(ruta))
names(datos)
table(datos$Genero)
norma = tapply(datos[,9],datos$Carrera,shapiro.test)
datos[,9]
datos$Carrera
# Hacer la prueba de normalidad via shapiro wilks
datos$Carrera = factor(datos$Carrera)
datos$Genero = factor(datos$Genero)
norma = tapply(datos[,9],datos$Carrera,shapiro.test)
?tapply
norma = tapply(datos[,9],datos$Carrera,sum)
norma
norma = tapply(datos[,9],datos$Carrera,shapiro.test)
tapply(iris$Sepal.Length ,datos$P1, shapiro.test)
tapply(iris$Sepal.Length ,iris$Species, shapiro.test)
table(datos[,9],datos$Carrera)
shapiro.test(datos[datos$Carrera=="Economía",9])
# Hacer la prueba de normalidad via shapiro wilks
datos$Carrera = factor(datos$Carrera)
datos$Genero = factor(datos$Genero)
unicos = unique(datos$Carrera)
auxiliar = c()
variable = datos[,9]
# Verifica si existen valores distintos
i = 1
auxiliar = c()
variable = datos[,9]
datos[datos$Carrera==unicos[i] ,9]
datos[datos$Carrera==unicos[2] ,9]
unique(datos[datos$Carrera==unicos[i] ,9])
unique(datos[datos$Carrera==unicos[i] ,9])
unique(datos[datos$Carrera==unicos[i] ,9])>1
length(unique(datos[datos$Carrera==unicos[i] ,9])) >1
# Comparación entre variables
variables = 9:45
length(variables)
a = datos[,variables]
dim(a)
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")
i = 1
j = 1
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
c(names(datos)[j+8],unico[i],auxiliar[i] )
# Verifica si existen valores distintos
i = 1
auxiliar = c()
variable = datos[,9]
c(names(datos)[j+8],unicos[i],auxiliar[i] )
# Verifica si existen valores distintos
i = 1
auxiliar = c()
variable = datos[,9]
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i] )
caso
unicos
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8] unicos[i],auxiliar[i])
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8] unicos[i],auxiliar[i])
# Hacer el vector de resultados
caso = c(names(datos)[j+8] unicos[i],auxiliar[i])
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
caso
rbind.data.frame(resu,caso)
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
# Verifica si existen valores distintos
i = 1
auxiliar = c()
variable = datos[,9]
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
i = 1
i
unique(datos$Carrera)
unicos = as.character(unique(datos$Carrera))
# Verifica si existen valores distintos
i = 1
auxiliar = c()
variable = datos[,9]
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
i = 1
resu
table(resu[,3])
unicos = as.character(unique(datos$Genero))
# Verifica si existen valores distintos
i = 1
auxiliar = c()
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
unicos = as.character(unique(datos$Genero))
unicos
unique(datos$Genero)
unicos = as.character(unique(datos$Genero))
unicos
table(datos$Genero,datos$P1)
table(datos$P1,datos$Genero)
# Verifica si existen valores distintos
i = 1
auxiliar = c()
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
resu
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Carrera==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
table(datos$P1,datos$Genero)
unicos = as.character(unique(datos$Genero))
# Verifica si existen valores distintos
i = 1
auxiliar = c()
# Revisador si hay valores valtantes o nel
# Esto necesita el nombre de la variable, la categoria y el resultado
resu = data.frame(Variable = "",Grupo = "",Normalidad = "")[-1,]
for(j in 1:length(variables)){
# Revisar este show
for(i in 1:length(unicos)){
# Revisa que onda con los unicos
if( length(unique(datos[datos$Genero==unicos[i] ,(j+8)])) >1 ){
# Probar normalidad
auxiliar[i] = "Probar"
}else{
# No probar normalidad
auxiliar[i] = "No"
}
# Hacer el vector de resultados
caso = c(names(datos)[j+8],unicos[i],auxiliar[i])
# Agregar a los resultados
resu = rbind.data.frame(resu,caso)
}
}
resu
tapply(datos[,9], datos$Genero, shapiro.test)
resgen = tapply(datos[,9], datos$Genero, shapiro.test)
resgen[1]
resgen[[1]]
# Extraer los valores de normalidad
a1 = resgen[[1]]
a1$statistic
a1$p.value
a1
genorm = data.frame(Variable = "",Grupo = "",W = 0,pvalor = 0,)[-1,]
genorm = data.frame(Variable = "",Grupo = "",W = 0,pvalor = 0)[-1,]
variables
# Obtener las normalidades
resgen = tapply(datos[,(i+8)], datos$Genero, shapiro.test)
resgen
# Extraer los valores de las normales
a1 = resgen[[1]]
a2 = resgen[[2]]
a1
a2
# Agregar los valores a esta cosa
genorm = data.frame(Variable = "",Grupo = "",W = 0,pvalor = 0)[-1,]
genorm
i = 1
(i+8)
names(datos)[(i+8)]
datos$Genero
# Extraer los valores de las normales
a1 = resgen[[1]]
a2 = resgen[[2]]
# Agregar los valores a esta cosa
r1 = data.frame(Variable = names(datos)[(i+8)],
Grupo = 1, W = a1$statistic, pvalor =a1$p.value)
r1
r2 = data.frame(Variable = names(datos)[(i+8)],
Grupo = 2, W = a2$statistic, pvalor =a2$p.value)
r2
genorm = data.frame(Variable = "",Grupo = "",W = 0,pvalor = 0)[-1,]
for(i in 1:length(variables)){
# Obtener las normalidades
resgen = tapply(datos[,(i+8)], datos$Genero, shapiro.test)
# Extraer los valores de las normales
a1 = resgen[[1]]
a2 = resgen[[2]]
# Agregar los valores a esta cosa
r1 = data.frame(Variable = names(datos)[(i+8)],
Grupo = 1, W = a1$statistic, pvalor =a1$p.value)
r2 = data.frame(Variable = names(datos)[(i+8)],
Grupo = 2, W = a2$statistic, pvalor =a2$p.value)
# Agregar al
genorm = rbind.data.frame(genorm,r1,r2)
}
genorm
genorm[,3:4] = round(genorm[,3:4],4)
genorm
genorm[genorm$pvalor>=0.05,]
